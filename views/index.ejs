<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title data-translate="page-title-inventory">
      Gold Jewelry Inventory Tracker
    </title>
    <link rel="stylesheet" href="/css/style.css" />
  </head>
  <body>
    <div class="container">
      <div class="header">
        <h1 data-translate="header-title">Gold Jewelry Inventory</h1>
        <div id="language-toggle"></div>
      </div>

      <!-- Summary Cards -->
      <div class="summary-cards">
        <div class="summary-card">
          <h3 data-translate="inventory-value">Inventory</h3>
          <div class="summary-value"><%= inventory.length %></div>
          <div class="summary-label" data-translate="summary-items">items</div>
        </div>
        <div class="summary-card">
          <h3 data-translate="inventory-value">Value</h3>
          <div class="summary-value">
            $<%= (totalInventoryValue || 0).toFixed(2) %>
          </div>
          <div class="summary-label" data-translate="summary-market-value">
            market value
          </div>
        </div>
        <div class="summary-card">
          <h3 data-translate="total-sales">Sales</h3>
          <div class="summary-value">$<%= totalSales.toFixed(2) %></div>
          <div class="summary-label" data-translate="summary-revenue">
            revenue
          </div>
        </div>
        <div class="summary-card">
          <h3 data-translate="total-profit">Profit</h3>
          <div class="summary-value">$<%= totalProfit.toFixed(2) %></div>
          <div class="summary-label" data-translate="summary-earned">
            earned
          </div>
        </div>
      </div>

      <!-- Action Buttons -->
      <div class="action-buttons">
        <a href="/add-item" class="btn primary" data-translate="add-new-item"
          >Add Item</a
        >
        <a href="/settings" class="btn secondary" data-translate="settings"
          >Settings</a
        >
      </div>

      <!-- Inventory Section -->
      <div class="section">
        <h2 data-translate="current-inventory">Inventory</h2>
        <% if (inventory.length === 0) { %>
        <div class="empty-state">
          <p data-translate="no-inventory">No items in inventory yet.</p>
          <a
            href="/add-item"
            class="btn primary"
            data-translate="add-first-item"
            >Add Your First Item</a
          >
        </div>
        <% } else { %>
        <div class="table-container">
          <!-- Inventory Sorting Controls -->
          <div class="sorting-controls">
            <label for="sortSelect" data-translate="sort-by">Sort by:</label>
            <select id="sortSelect" onchange="sortInventory(this.value)">
              <option
                value="inventory-number-asc"
                data-translate="inventory-number-low-high"
              >
                📋 Inventory Number (Low→High)
              </option>
              <option
                value="inventory-number-desc"
                data-translate="inventory-number-high-low"
              >
                📋 Inventory Number (High→Low)
              </option>
              <option value="weight-asc" data-translate="weight-low-high">
                ⚖️ Weight (Low→High)
              </option>
              <option value="weight-desc" data-translate="weight-high-low">
                ⚖️ Weight (High→Low)
              </option>
              <option value="karat-asc" data-translate="karat-low-high">
                💎 Karat (Low→High)
              </option>
              <option value="karat-desc" data-translate="karat-high-low">
                💎 Karat (High→Low)
              </option>
              <option value="cost-asc" data-translate="cost-low-high">
                💰 Cost (Low→High)
              </option>
              <option value="cost-desc" data-translate="cost-high-low">
                💰 Cost (High→Low)
              </option>
              <option
                value="market-value-asc"
                data-translate="market-value-low-high"
              >
                📈 Market Value (Low→High)
              </option>
              <option
                value="market-value-desc"
                data-translate="market-value-high-low"
              >
                📈 Market Value (High→Low)
              </option>
              <option
                value="dealer-value-asc"
                data-translate="dealer-value-low-high"
              >
                🏪 Dealer Value (Low→High)
              </option>
              <option
                value="dealer-value-desc"
                data-translate="dealer-value-high-low"
              >
                🏪 Dealer Value (High→Low)
              </option>
            </select>
          </div>

          <table class="inventory-table" id="inventoryTable">
            <thead>
              <tr>
                <th data-translate="inventory-number">Inventory Number</th>
                <th data-translate="item-type">Type</th>
                <th data-translate="item-weight">Weight (g)</th>
                <th data-translate="item-purity">Purity</th>
                <th data-translate="item-karat">Karat</th>
                <th data-translate="item-cost">Cost</th>
                <th data-translate="item-market-value">Market Value</th>
                <th data-translate="item-dealer-value">Dealer Value</th>
                <th data-translate="item-actions">Actions</th>
              </tr>
            </thead>
            <tbody>
              <% inventory.forEach(function(item) { %>
              <tr>
                <td><%= item.name %></td>
                <td><%= item.type %></td>
                <td><%= item.weight.toFixed(2) %></td>
                <td><%= item.purity.toFixed(1) %>%</td>
                <td>
                  <strong
                    ><%= item.karat || getKaratFromPurity(item.purity)
                    %></strong
                  >
                </td>
                <td>$<%= item.cost.toFixed(2) %></td>
                <td>
                  $<%= item.marketValue ? item.marketValue.toFixed(2) : 'N/A' %>
                </td>
                <td>
                  $<%= item.dealerValue ? item.dealerValue.toFixed(2) : 'N/A' %>
                </td>
                <td>
                  <a
                    href="/sell-item/<%= item.id %>"
                    class="btn small primary"
                    data-translate="sell"
                    >💰 Sell</a
                  >
                  <button
                    onclick="deleteItem('<%= item.id %>')"
                    class="btn small danger"
                    data-translate="delete"
                  >
                    🗑️
                  </button>
                </td>
              </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
        <% } %>
      </div>

      <!-- Sales Section -->
      <div class="section">
        <h2 data-translate="sales-title">💰 Recent Sales</h2>
        <% if (sales.length === 0) { %>
        <div class="empty-state">
          <p data-translate="no-sales">No sales recorded yet.</p>
        </div>
        <% } else { %>
        <div class="table-container">
          <!-- Sales Sorting Controls -->
          <div class="sorting-controls">
            <label for="salesSortSelect" data-translate="sort-by"
              >Sort by:</label
            >
            <select id="salesSortSelect" onchange="sortSales(this.value)">
              <option
                value="inventory-number-asc"
                data-translate="inventory-number-low-high"
              >
                📋 Inventory Number (Low→High)
              </option>
              <option
                value="inventory-number-desc"
                data-translate="inventory-number-high-low"
              >
                📋 Inventory Number (High→Low)
              </option>
              <option value="weight-asc" data-translate="weight-low-high">
                ⚖️ Weight (Low→High)
              </option>
              <option value="weight-desc" data-translate="weight-high-low">
                ⚖️ Weight (High→Low)
              </option>
              <option value="karat-asc" data-translate="karat-low-high">
                💎 Karat (Low→High)
              </option>
              <option value="karat-desc" data-translate="karat-high-low">
                💎 Karat (High→Low)
              </option>
              <option value="cost-asc" data-translate="cost-low-high">
                💰 Cost (Low→High)
              </option>
              <option value="cost-desc" data-translate="cost-high-low">
                💰 Cost (High→Low)
              </option>
              <option value="price-asc" data-translate="sale-price-low-high">
                💵 Sale Price (Low→High)
              </option>
              <option value="price-desc" data-translate="sale-price-high-low">
                💵 Sale Price (High→Low)
              </option>
              <option value="profit-asc" data-translate="profit">
                📈 Profit (Low→High)
              </option>
              <option value="profit-desc" data-translate="profit">
                📈 Profit (High→Low)
              </option>
              <option value="date-asc">📅 Date (Old→New)</option>
              <option value="date-desc">📅 Date (New→Old)</option>
            </select>
          </div>

          <table class="sales-table" id="salesTable">
            <thead>
              <tr>
                <th data-translate="inventory-number">Inventory Number</th>
                <th data-translate="sale-weight">Weight (g)</th>
                <th data-translate="sale-purity">Purity</th>
                <th data-translate="sale-karat">Karat</th>
                <th data-translate="sale-cost">Cost</th>
                <th data-translate="sale-price">Sale Price</th>
                <th data-translate="sale-profit">Profit</th>
                <th data-translate="sale-date">Date</th>
              </tr>
            </thead>
            <tbody>
              <% sales.slice(-10).reverse().forEach(function(sale) { %>
              <tr>
                <td><%= sale.itemName %></td>
                <td><%= sale.weight.toFixed(2) %></td>
                <td><%= sale.purity.toFixed(1) %>%</td>
                <td>
                  <strong
                    ><%= sale.karat || getKaratFromPurity(sale.purity)
                    %></strong
                  >
                </td>
                <td>$<%= sale.cost.toFixed(2) %></td>
                <td>$<%= sale.price.toFixed(2) %></td>
                <td class="<%= sale.profit >= 0 ? 'positive' : 'negative' %>">
                  $<%= sale.profit.toFixed(2) %>
                </td>
                <td><%= new Date(sale.dateSold).toLocaleDateString() %></td>
              </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
        <% } %>
      </div>

      <!-- Gold Price Information -->
      <div class="section">
        <h2 data-translate="gold-market">Gold Market</h2>
        <div
          class="summary-cards"
          style="grid-template-columns: repeat(auto-fit, minmax(200px, 1fr))"
        >
          <div class="summary-card">
            <h3 data-translate="gold-price">Gold Price</h3>
            <div class="summary-value">
              $<%= (settings && settings.goldPricePerOunce ?
              settings.goldPricePerOunce : 3314.92).toFixed(2) %>
            </div>
            <div class="summary-label" data-translate="per-ounce">
              per ounce
            </div>
          </div>
          <div class="summary-card">
            <h3 data-translate="per-gram">Per Gram</h3>
            <div class="summary-value">
              $<%= ((settings && settings.goldPricePerOunce ?
              settings.goldPricePerOunce : 3314.92) / 31.1034768).toFixed(2) %>
            </div>
            <div class="summary-label" data-translate="24k-gold">24K gold</div>
          </div>
          <div class="summary-card">
            <h3 data-translate="updated">Updated</h3>
            <div class="summary-value">
              <%= settings && settings.lastUpdated ? new
              Date(settings.lastUpdated).toLocaleDateString() : new
              Date().toLocaleDateString() %>
            </div>
            <div class="summary-label">
              <%= settings && settings.lastUpdated ? new
              Date(settings.lastUpdated).toLocaleTimeString() : new
              Date().toLocaleTimeString() %>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Credit Line -->
    <div
      style="
        text-align: center;
        margin-top: 40px;
        padding: 20px;
        border-top: 1px solid #eee;
      "
    >
      <small style="color: #888; font-size: 12px">
        Website system created by Cristian Hernandez
      </small>
    </div>

    <script src="/js/language.js"></script>
    <script>
      function deleteItem(itemId) {
        const confirmMessage =
          LanguageManager.currentLanguage === "es"
            ? LanguageManager.translations.es["delete-confirm"]
            : LanguageManager.translations.en["delete-confirm"];

        if (confirm(confirmMessage)) {
          fetch(`/item/${itemId}`, {
            method: "DELETE",
          })
            .then((response) => response.json())
            .then((data) => {
              if (data.success) {
                location.reload();
              } else {
                alert("Error deleting item");
              }
            })
            .catch((error) => {
              console.error("Error:", error);
              alert("Error deleting item");
            });
        }
      }

      // Helper function to get karat from purity (fallback for items without karat)
      function getKaratFromPurity(purity) {
        if (purity >= 99.0) return "24K";
        if (purity >= 90.0) return "22K";
        if (purity >= 70.0) return "18K";
        if (purity >= 55.0) return "14K";
        if (purity >= 40.0) return "10K";
        if (purity >= 35.0) return "9K";
        return "Custom";
      }

      // Inventory sorting function
      function sortInventory(column) {
        const table = document.getElementById("inventoryTable");
        const tbody = table.querySelector("tbody");
        const rows = Array.from(tbody.querySelectorAll("tr"));

        // Determine sort direction and base column
        const isDescending = column.includes("-desc");
        const baseColumn = column.replace("-asc", "").replace("-desc", "");

        rows.sort((a, b) => {
          let aValue, bValue;
          let comparison = 0;

          switch (baseColumn) {
            case "inventory-number":
              aValue = parseInt(a.cells[0].textContent) || 0;
              bValue = parseInt(b.cells[0].textContent) || 0;
              comparison = aValue - bValue;
              break;
            case "weight":
              aValue = parseFloat(a.cells[2].textContent);
              bValue = parseFloat(b.cells[2].textContent);
              comparison = aValue - bValue;
              break;
            case "karat":
              aValue = a.cells[4].textContent;
              bValue = b.cells[4].textContent;
              comparison = aValue.localeCompare(bValue);
              break;
            case "cost":
              aValue = parseFloat(a.cells[5].textContent.replace("$", ""));
              bValue = parseFloat(b.cells[5].textContent.replace("$", ""));
              comparison = aValue - bValue;
              break;
            case "market-value":
              aValue =
                a.cells[6].textContent === "N/A"
                  ? 0
                  : parseFloat(a.cells[6].textContent.replace("$", ""));
              bValue =
                b.cells[6].textContent === "N/A"
                  ? 0
                  : parseFloat(b.cells[6].textContent.replace("$", ""));
              comparison = aValue - bValue;
              break;
            case "dealer-value":
              aValue =
                a.cells[7].textContent === "N/A"
                  ? 0
                  : parseFloat(a.cells[7].textContent.replace("$", ""));
              bValue =
                b.cells[7].textContent === "N/A"
                  ? 0
                  : parseFloat(b.cells[7].textContent.replace("$", ""));
              comparison = aValue - bValue;
              break;
            default:
              return 0;
          }

          // Apply sort direction
          return isDescending ? -comparison : comparison;
        });

        // Clear and re-append sorted rows
        rows.forEach((row) => tbody.appendChild(row));
      }

      // Sales sorting function
      function sortSales(column) {
        const table = document.getElementById("salesTable");
        const tbody = table.querySelector("tbody");
        const rows = Array.from(tbody.querySelectorAll("tr"));

        // Determine sort direction and base column
        const isDescending = column.includes("-desc");
        const baseColumn = column.replace("-asc", "").replace("-desc", "");

        rows.sort((a, b) => {
          let aValue, bValue;
          let comparison = 0;

          switch (baseColumn) {
            case "inventory-number":
              aValue = parseInt(a.cells[0].textContent) || 0;
              bValue = parseInt(b.cells[0].textContent) || 0;
              comparison = aValue - bValue;
              break;
            case "weight":
              aValue = parseFloat(a.cells[1].textContent);
              bValue = parseFloat(b.cells[1].textContent);
              comparison = aValue - bValue;
              break;
            case "karat":
              aValue = a.cells[3].textContent;
              bValue = b.cells[3].textContent;
              comparison = aValue.localeCompare(bValue);
              break;
            case "cost":
              aValue = parseFloat(a.cells[4].textContent.replace("$", ""));
              bValue = parseFloat(b.cells[4].textContent.replace("$", ""));
              comparison = aValue - bValue;
              break;
            case "price":
              aValue = parseFloat(a.cells[5].textContent.replace("$", ""));
              bValue = parseFloat(b.cells[5].textContent.replace("$", ""));
              comparison = aValue - bValue;
              break;
            case "profit":
              aValue = parseFloat(a.cells[6].textContent.replace("$", ""));
              bValue = parseFloat(b.cells[6].textContent.replace("$", ""));
              comparison = aValue - bValue;
              break;
            case "date":
              aValue = new Date(a.cells[7].textContent);
              bValue = new Date(b.cells[7].textContent);
              comparison = aValue - bValue;
              break;
            default:
              return 0;
          }

          // Apply sort direction
          return isDescending ? -comparison : comparison;
        });

        // Clear and re-append sorted rows
        rows.forEach((row) => tbody.appendChild(row));
      }
    </script>
  </body>
</html>
